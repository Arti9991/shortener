// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shortener_PostAddr_FullMethodName    = "/protoServer.Shortener/PostAddr"
	Shortener_GetAddr_FullMethodName     = "/protoServer.Shortener/GetAddr"
	Shortener_GetAddrUser_FullMethodName = "/protoServer.Shortener/GetAddrUser"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	PostAddr(ctx context.Context, in *PostAddrRequset, opts ...grpc.CallOption) (*PostAddrResponse, error)
	GetAddr(ctx context.Context, in *GetAddrRequset, opts ...grpc.CallOption) (*GetAddrResponse, error)
	GetAddrUser(ctx context.Context, in *GetAddrUserRequset, opts ...grpc.CallOption) (*GetAddrUserResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) PostAddr(ctx context.Context, in *PostAddrRequset, opts ...grpc.CallOption) (*PostAddrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAddrResponse)
	err := c.cc.Invoke(ctx, Shortener_PostAddr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAddr(ctx context.Context, in *GetAddrRequset, opts ...grpc.CallOption) (*GetAddrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddrResponse)
	err := c.cc.Invoke(ctx, Shortener_GetAddr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAddrUser(ctx context.Context, in *GetAddrUserRequset, opts ...grpc.CallOption) (*GetAddrUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddrUserResponse)
	err := c.cc.Invoke(ctx, Shortener_GetAddrUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility.
type ShortenerServer interface {
	PostAddr(context.Context, *PostAddrRequset) (*PostAddrResponse, error)
	GetAddr(context.Context, *GetAddrRequset) (*GetAddrResponse, error)
	GetAddrUser(context.Context, *GetAddrUserRequset) (*GetAddrUserResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerServer struct{}

func (UnimplementedShortenerServer) PostAddr(context.Context, *PostAddrRequset) (*PostAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAddr not implemented")
}
func (UnimplementedShortenerServer) GetAddr(context.Context, *GetAddrRequset) (*GetAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddr not implemented")
}
func (UnimplementedShortenerServer) GetAddrUser(context.Context, *GetAddrUserRequset) (*GetAddrUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddrUser not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}
func (UnimplementedShortenerServer) testEmbeddedByValue()                   {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	// If the following call pancis, it indicates UnimplementedShortenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_PostAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAddrRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_PostAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostAddr(ctx, req.(*PostAddrRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddrRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAddr(ctx, req.(*GetAddrRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAddrUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddrUserRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAddrUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetAddrUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAddrUser(ctx, req.(*GetAddrUserRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoServer.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAddr",
			Handler:    _Shortener_PostAddr_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _Shortener_GetAddr_Handler,
		},
		{
			MethodName: "GetAddrUser",
			Handler:    _Shortener_GetAddrUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
